{
  "name": "cards",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -16,
        -16
      ],
      "id": "cea6805a-0b6d-43a1-804d-7c5ace5bbdcc",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "content": "## Obtenção de cartas",
        "height": 258.0964713064308,
        "width": 903.9029040203084
      },
      "id": "1310d884-a5af-4616-a12a-4493f3293a19",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        -80
      ]
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "returnAll": true,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1QNw3NdCrl9LLuh6pV2FSLVgMu-6SAVde",
            "mode": "list",
            "cachedResultName": "cartas em ingles",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1QNw3NdCrl9LLuh6pV2FSLVgMu-6SAVde"
          }
        },
        "options": {
          "fields": [
            "webViewLink",
            "id",
            "name",
            "*"
          ]
        }
      },
      "id": "6810fda3-a89b-425e-b88a-d11f7816b64c",
      "name": "Encontra Cartas",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        192,
        -16
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "EZQEcbZc2fRD9p8C",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "text": "Traduza o texto dessa imagem para o portugues. Dê a resposta no formato Json respeitando o seguinte template:\n{\n  \"topic\": \"Observability Quality Aspects\",\n  \"aspect\": {\n    \"name\": \"Controllability Aspect\",\n    \"description\": \"How well can you see what’s actually going on within the product? Can you answer new questions without deploying code?\"\n  },\n  \"points\": [\n    {\n      \"id\": 1,\n      \"question\": \"How well can you understand the internals of a system by only observing the outputs?\"\n    },\n    {\n      \"id\": 2,\n      \"description\": \"Capture different sources of data within rich logs with improved information for debugging, vulnerability detection, traffic monitoring...\"\n    },\n    {\n      \"id\": 3,\n      \"description\": \"Swinging red lights! Alarms! Our system has picked up that we’re losing money/users/speed because of a failure in a specific running feature.\"\n    }\n  ],\n  \"visual_style\": {\n    \"background_color\": \"blue\",\n    \"text_color\": \"white\",\n    \"section_dividers\": \"dotted_lines\"\n  }\n}\n",
        "imageUrls": "={{ $json.webContentLink }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        384,
        -16
      ],
      "id": "75ad4b2e-606c-4ba5-abb4-c4d3adaf3513",
      "name": "Analyze image",
      "credentials": {
        "openAiApi": {
          "id": "e24cqqnMWNr46eL0",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "const results = [];\n\nfor (const item of items) {\n  const data = item.json ?? {};\n  const textCandidates = [];\n\n  if (typeof data === 'string') {\n    textCandidates.push(data);\n  }\n\n  if (typeof data.text === 'string') {\n    textCandidates.push(data.text);\n  }\n\n  if (typeof data.result === 'string') {\n    textCandidates.push(data.result);\n  }\n\n  if (Array.isArray(data.data)) {\n    for (const entry of data.data) {\n      if (!entry) {\n        continue;\n      }\n\n      if (typeof entry === 'string') {\n        textCandidates.push(entry);\n      }\n\n      const content = entry.content ?? entry.message ?? entry.text;\n\n      if (typeof content === 'string') {\n        textCandidates.push(content);\n      } else if (Array.isArray(content)) {\n        for (const contentEntry of content) {\n          if (!contentEntry) {\n            continue;\n          }\n\n          if (typeof contentEntry === 'string') {\n            textCandidates.push(contentEntry);\n          } else if (typeof contentEntry.text === 'string') {\n            textCandidates.push(contentEntry.text);\n          }\n        }\n      }\n    }\n  } else if (typeof data.data === 'string') {\n    textCandidates.push(data.data);\n  }\n\n  if (Array.isArray(data.choices)) {\n    for (const choice of data.choices) {\n      if (!choice) {\n        continue;\n      }\n\n      if (typeof choice.text === 'string') {\n        textCandidates.push(choice.text);\n      }\n\n      const message = choice.message ?? {};\n      if (typeof message === 'string') {\n        textCandidates.push(message);\n      } else if (typeof message.content === 'string') {\n        textCandidates.push(message.content);\n      } else if (Array.isArray(message.content)) {\n        for (const entry of message.content) {\n          if (!entry) {\n            continue;\n          }\n\n          if (typeof entry === 'string') {\n            textCandidates.push(entry);\n          } else if (typeof entry.text === 'string') {\n            textCandidates.push(entry.text);\n          }\n        }\n      }\n    }\n  }\n\n  const uniqueCandidates = [...new Set(textCandidates.filter((candidate) => typeof candidate === 'string' && candidate.trim().length))];\n\n  let parsed;\n  let lastError;\n\n  for (const candidate of uniqueCandidates) {\n    try {\n      parsed = JSON.parse(candidate);\n      break;\n    } catch (error) {\n      lastError = error;\n    }\n  }\n\n  if (!parsed) {\n    throw new Error(`Não foi possível interpretar a resposta do modelo como JSON: ${lastError}`);\n  }\n\n  results.push({ json: parsed });\n}\n\nreturn results;"
      },
      "id": "7390872e-e6bd-4d59-93fa-88da0655222c",
      "name": "Interpretar JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        576,
        -16
      ]
    },
    {
      "parameters": {
        "functionCode": "const output = [];\n\nfor (const item of items) {\n  const data = item.json ?? {};\n  const base = {\n    topic: data.topic ?? '',\n    aspect_name: data.aspect?.name ?? '',\n    aspect_description: data.aspect?.description ?? '',\n    background_color: data.visual_style?.background_color ?? '',\n    text_color: data.visual_style?.text_color ?? '',\n    section_dividers: data.visual_style?.section_dividers ?? ''\n  };\n\n  if (Array.isArray(data.points) && data.points.length) {\n    for (const point of data.points) {\n      output.push({\n        json: {\n          ...base,\n          point_id: point?.id ?? '',\n          point_question: point?.question ?? '',\n          point_description: point?.description ?? ''\n        }\n      });\n    }\n  } else {\n    output.push({ json: base });\n  }\n}\n\nreturn output;"
      },
      "id": "469118c7-051a-4332-b240-d0ac6295e1db",
      "name": "Preparar linhas",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        768,
        112
      ]
    },
    {
      "parameters": {
        "resource": "document",
        "operation": "create",
        "title": "={{ 'crads' + $now.toFormat('yyyyLLddHHmmss') }}"
      },
      "id": "fbd3a81d-b3f5-4f8d-a792-ffaeea9cadf8",
      "name": "Criar planilha",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        768,
        -128
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TfqOT5rYq8z8E7Wc",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "resource": "sheet",
        "sheetId": "={{ $('Criar planilha').item.json.spreadsheetId }}",
        "options": {
          "valueInputMode": "RAW"
        },
        "columns": [
          "topic",
          "aspect_name",
          "aspect_description",
          "point_id",
          "point_question",
          "point_description",
          "background_color",
          "text_color",
          "section_dividers"
        ]
      },
      "id": "6f3aa757-7ae9-4427-afba-19aae4a830ad",
      "name": "Registrar dados",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        960,
        112
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "TfqOT5rYq8z8E7Wc",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Encontra Cartas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Encontra Cartas": {
      "main": [
        [
          {
            "node": "Analyze image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze image": {
      "main": [
        [
          {
            "node": "Interpretar JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interpretar JSON": {
      "main": [
        [
          {
            "node": "Criar planilha",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Preparar linhas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar linhas": {
      "main": [
        [
          {
            "node": "Registrar dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Criar planilha": {
      "main": [
        [
          {
            "node": "Registrar dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3ec2323b-6053-4f9d-8be5-300525b6bdec",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9f80713bf772ccc2c93dc92bf6168d73ec5f1400b4f905df9368f7195b1135bb"
  },
  "id": "85Knexd4LJtR7QUz",
  "tags": []
}